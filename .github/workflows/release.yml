name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: tag name
  push:
    tags:
      - v*.*.*

jobs:
  release:
    name: "Job - ${{ matrix.name }}"
    runs-on: "${{ matrix.os }}"
    env:
      CI_JOB_NAME: "${{ matrix.name }}"
    
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: dist-aarch64-linux-gnu
            os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu

          - name: dist-x86-64-linux-gnu
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu

          - name: dist-aarch64-linux-musl
            os: ubuntu-20.04
            target: aarch64-unknown-linux-musl

          - name: dist-x86-64-linux-musl
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl

          - name: dist-windows-msvc
            os: windows-latest
            target: x86_64-pc-windows-msvc
            target-gnu: x86_64-pc-windows-gnu

    steps:
      - name: checkout the source code
        uses: actions/checkout@v4

      - name: Set up QEMU for ARM64
        if: contains(matrix.target, 'aarch64')
        uses: docker/setup-qemu-action@v2
        with:
          platforms: aarch64
      
      - name: Set up QEMU for multiple cores
        if: contains(matrix.target, 'aarch64')
        run: |
          echo "Setting up QEMU with multiple cores"
          export QEMU_CPUS=4  # 设置虚拟 CPU 核心数为 4
          # 设置 QEMU 使用多个核心
          echo "Using $QEMU_CPUS CPUs with QEMU"

      - name: run build job
        run: bash ci/run.sh

      - name: prepare packages (windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          set -x
          export LANG=C.UTF-8
          NAME=$(grep -Po 'vendor_en": "\K[^"]*' locales/en.json)
          mkdir ./dist/binaries/
          mv ./dist/${{ matrix.target-gnu }}/$NAME-installer.exe ./dist/binaries/$NAME-installer-${{ matrix.target-gnu }}.exe
          mv ./dist/${{ matrix.target }}/$NAME-installer.exe ./dist/binaries/$NAME-installer-${{ matrix.target }}.exe
          cd ./dist/${{ matrix.target-gnu }}
          rm -f $NAME-${{ matrix.target-gnu }}/$NAME-installer-cli.exe
          7z a ../binaries/$NAME-${{ matrix.target-gnu }}.zip $NAME-${{ matrix.target-gnu }}
          cd ../${{ matrix.target }}
          rm -f $NAME-${{ matrix.target }}/$NAME-installer-cli.exe
          7z a ../binaries/$NAME-${{ matrix.target }}.zip $NAME-${{ matrix.target }}

      - name: prepare packages (unix)
        if: matrix.os != 'windows-latest'
        run: |
          set -x
          NAME=$(grep -Po 'vendor_en": "\K[^"]*' locales/en.json)
          sudo mkdir ./dist/binaries/
          sudo mv ./dist/${{ matrix.target }}/$NAME-installer-cli ./dist/binaries/$NAME-installer-cli-${{ matrix.target }}
          sudo mv ./dist/${{ matrix.target }}/$NAME-installer ./dist/binaries/$NAME-installer-${{ matrix.target }}
          cd ./dist/${{ matrix.target }}
          sudo tar cjf ../binaries/$NAME-${{ matrix.target }}.tar.xz $NAME-${{ matrix.target }}

      - name: upload release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          generateReleaseNotes: true
          artifacts: "./dist/binaries/*"
