use super::TOOLKIT_NAME;
use anyhow::{Context, Result};
use std::{fs, path::PathBuf};

/// The versions to write to
static VERSIONS: &[&str] = &["1.80.0", "1.80.1", "1.81.0", "1.82.0"];

struct FakeServer {
    dist_dir: PathBuf,
}

impl FakeServer {
    fn new() -> Self {
        let dist_dir = super::server_dir().join("dist");
        fs::create_dir_all(&dist_dir)
            .unwrap_or_else(|_| panic!("unable to create mocked dist dir"));
        Self { dist_dir }
    }

    fn gen_dist_manifest(&self) -> Result<()> {
        let server_url = super::server_dir_url();
        let dist_manifest_content_for = |ver: &str| -> String {
            format!(
                "
[[packages]]
name = \"{TOOLKIT_NAME}\"
version = \"stable-{ver}\"
desc = \"This is is generated for testing purpose\"
info = '''
- A fake toolkit with fake info that is generated by rim-dev
'''
manifest-url = \"{}/dist/stable-{ver}.toml\"
",
                server_url.as_str()
            )
        };

        let mut full_content = String::new();
        for ver in VERSIONS {
            full_content.push_str(&dist_manifest_content_for(ver));
        }

        let dist_manifest = self.dist_dir.join("distribution-manifest.toml");
        fs::write(dist_manifest, full_content).context("unable to create dist-manifest")
    }

    fn gen_toolset_manifests(&self) -> Result<()> {
        let toolset_manifest_for = |ver: &str| -> String {
            format!(
                "
name = \"{TOOLKIT_NAME}\"
version = \"stable-{ver}\"

[rust]
version = \"{ver}\"
group = \"Rust\"
components = [\"clippy\", \"rustfmt\", \"rust-src\", \"rust-docs\"]
optional-components = [\"llvm-tools\", \"rustc-dev\", \"rust-analyzer\"]

[rust.profile]
name = \"minimal\"
verbose-name = \"Basic\"
description = \"Basic set of tools to use Rust properly\"

[tools.descriptions]
llvm-tools = \"llvm-tools\"
rustc-dev = \"rustc-dev\"
rust-analyzer = \"rust-analyzer\"
",
            )
        };

        for ver in VERSIONS {
            let content = toolset_manifest_for(ver);
            // the name should match the ones in `gen_dist_manifest`
            let filename = format!("stable-{ver}.toml");
            let dest = self.dist_dir.join(filename);
            fs::write(dest, content)?;
        }

        Ok(())
    }
}

pub(crate) fn generate() -> Result<()> {
    let mocked = FakeServer::new();
    mocked.gen_toolset_manifests()?;
    mocked.gen_dist_manifest()?;
    Ok(())
}
